import 'package:freezed_annotation/freezed_annotation.dart';
//This part file does not currently exist and will be generated by 'freezed'
//It can be auto generated by typing 'ptf'
//After this run 'dart run build_runner build --delete-conflicting-outputs' command.
//Or instead of 'build', use 'watch' to regenerate it automatically when the change is detected
part 'class_advance.freezed.dart';

void main(List<String> arguments) {
  //After successfully generating the part file
  const resultSuccess = Result.success(100);
  print(
    resultSuccess.when(
      loading: () {
        return 'Loading....';
      },
      success: (value) {
        return 'Yes! Data gotten successfully: $value';
      },
      failure: (msg) {
        return 'No! error occured: $msg';
      },
    ),
  );

  print(
    resultSuccess.maybeWhen(
      //If it's not failure, it runs orElse statement.
      orElse: () => 'orElse',
      failure: (msg) {
        return 'No! error occured: $msg';
      },
    ),
  );

  print(
    resultSuccess.map(
      loading: (loadingCase) {
        return 'Loading....';
      },
      success: (successCase) {
        return 'Yes! Data gotten successfully: ${successCase.value}';
      },
      failure: (failureCase) {
        return 'No! error occurred: ${failureCase.errMsg}';
      },
    ),
  );
}

//Use 'funion' keyword for auto-generated
@freezed
class Result with _$Result {
  const Result._();
  const factory Result.loading() = _Loading;
  const factory Result.success(int value) = _Success;
  const factory Result.failure(String errMsg) = _Failure;
}
